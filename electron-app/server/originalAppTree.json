{"routers":[{"pathRegex":{"fast_star":false,"fast_slash":false},"endpoints":{"/:id":{"methods":{"get":true},"path":"/:id","stack":[{"name":"<anonymous>","keys":[],"regexp":{"fast_star":false,"fast_slash":false},"method":"get"},{"name":"<anonymous>","keys":[],"regexp":{"fast_star":false,"fast_slash":false},"method":"get"}],"middlewareChain":{"funcString":"(req, res, next) => {\n  const id = req.params.id;\n  fetch(`https://swapi.dev/api/people/${id}`)\n    .then((data) => data.json())\n    .then((data) => {\n      res.locals.character = data;\n      return next();\n    })\n    .catch((err) => {\n      return next({\n        log: 'swapiController.getMoreCharacterData Error',\n        message: 'getCharacter failure',\n      });\n    });\n}","nextFunc":{"funcString":"(req, res) => {\n  res.status(200).json(res.locals.character);\n}","nextFunc":null}}},"/":{"methods":{"post":true},"path":"/","stack":[{"name":"<anonymous>","keys":[],"regexp":{"fast_star":false,"fast_slash":false},"method":"post"},{"name":"<anonymous>","keys":[],"regexp":{"fast_star":false,"fast_slash":false},"method":"post"},{"name":"<anonymous>","keys":[],"regexp":{"fast_star":false,"fast_slash":false},"method":"post"}],"middlewareChain":{"funcString":"(req, res, next) => {\n  const { name, height, birth_year, hair_color, skin_color, eye_color } =\n    req.body;\n  try {\n    if (\n      !name ||\n      !height ||\n      !birth_year ||\n      !hair_color ||\n      !skin_color ||\n      !eye_color\n    )\n      throw 'Incorrect data received!';\n    res.locals.newCharacter = {\n      name: name,\n      height: height,\n      birth_year: birth_year,\n      hair_color: hair_color,\n      skin_color: skin_color,\n      eye_color: eye_color,\n    };\n    return next();\n  } catch (err) {\n    // console.log('yoyoyo in catch block');\n    return next({\n      log: 'characterController.createCharacter caused error',\n      message: {\n        err: `characterController.createCharacter: ERROR: ${err}`,\n      },\n    });\n  }\n}","nextFunc":{"funcString":"(req, res, next) => {\n  // check if the correct information is on res.locals\n  if (!res.locals.updates && !res.locals.newCharacter) {\n    return next(createErr({\n      method: 'saveCharacter',\n      type: 'previous middleware error',\n      err: 'incorrect info on res.locals',\n    }));\n  }\n  // read from characters file\n  fs.readFile(path.resolve(__dirname, '../data/characters.json'), 'UTF-8')\n    .then(data => {\n      let finalCharacter;\n      const parsedData = JSON.parse(data);\n      if (res.locals.updates) {\n        // if we are updating, grab info from res.locals\n        const { id, nickname, fav_food } = res.locals.updates;\n        // get the character from our array based off its id\n        const character = parsedData.results[id];\n        /** NOTE: these checks are in place of defining a delete route for deleting customizations.\n         * This was done to achieve simplicity in the steps of this unit \n         * and this pattern should NOT be replicated in production code. */\n        if (nickname !== 'keep') character.nickname = nickname;\n        if (nickname === 'delete') delete character.nickname;\n        if (fav_food !== 'keep') character.fav_food = fav_food;\n        if (fav_food === 'delete') delete character.fav_food;\n\n        finalCharacter = character;\n      } else if (res.locals.newCharacter) {\n        // if we are saving a new character, give it an id and custom prop\n        // & use what was stored on res.locals from previous middleware\n        finalCharacter = {\n          dbId: parsedData.results.length,\n          custom: true,\n          ...res.locals.newCharacter\n        } // push the new character into the character array\n        parsedData.results.push(finalCharacter);\n      } // write updated characters to file as json\n      fs.writeFile(path.resolve(__dirname, '../data/characters.json'), \n      JSON.stringify(parsedData), 'UTF-8')\n        .then(() => {\n          // save the newly created/updated character on res.locals\n          if (res.locals.updates) res.locals.updatedCharacter = finalCharacter;\n          else res.locals.newCharacter = finalCharacter;\n          return next();\n        }).catch(err => next(createErr({\n            method: 'saveCharacter', \n            type: 'writing file', \n            err,\n        })));\n    }).catch(err => next(createErr({\n      method: 'saveCharacter', \n      type: 'reading file', \n      err,\n    })));\n}","nextFunc":{"funcString":"(req, res) => {\n    res.status(200).json(res.locals.newCharacter);\n  }","nextFunc":null}}}}},"router":{"name":"router","keys":[],"regexp":{"fast_star":false,"fast_slash":false}},"stack":[{"name":"bound dispatch","keys":[{"name":"id","optional":false,"offset":1}],"regexp":{"fast_star":false,"fast_slash":false},"route":{"path":"/:id","stack":[{"name":"<anonymous>","keys":[],"regexp":{"fast_star":false,"fast_slash":false},"method":"get"},{"name":"<anonymous>","keys":[],"regexp":{"fast_star":false,"fast_slash":false},"method":"get"}],"methods":{"get":true}}},{"name":"bound dispatch","keys":[],"regexp":{"fast_star":false,"fast_slash":false},"route":{"path":"/","stack":[{"name":"<anonymous>","keys":[],"regexp":{"fast_star":false,"fast_slash":false},"method":"post"},{"name":"<anonymous>","keys":[],"regexp":{"fast_star":false,"fast_slash":false},"method":"post"},{"name":"<anonymous>","keys":[],"regexp":{"fast_star":false,"fast_slash":false},"method":"post"}],"methods":{"post":true}}}]},{"pathRegex":{"fast_star":false,"fast_slash":false},"endpoints":{"/":{"methods":{"get":true},"path":"/","stack":[{"name":"<anonymous>","keys":[],"regexp":{"fast_star":false,"fast_slash":false},"method":"get"},{"name":"<anonymous>","keys":[],"regexp":{"fast_star":false,"fast_slash":false},"method":"get"}],"middlewareChain":{"funcString":"(req, res, next) => {\n  fsCallback.readFile(path.resolve(__dirname, '../data/characters.json'),\n    'UTF-8', \n    (err, chars) => {\n      if (err) return next(createErr({\n          method: 'getCharacters',\n          type: 'reading file',\n          err,\n        }));\n      const parsedData = JSON.parse(chars);\n      res.locals.characters = parsedData.results;\n      return next();\n    });\n}","nextFunc":{"funcString":"(req, res) => {\n  res.status(200).json(res.locals);\n}","nextFunc":null}}}},"router":{"name":"router","keys":[],"regexp":{"fast_star":false,"fast_slash":false}},"stack":[{"name":"bound dispatch","keys":[],"regexp":{"fast_star":false,"fast_slash":false},"route":{"path":"/","stack":[{"name":"<anonymous>","keys":[],"regexp":{"fast_star":false,"fast_slash":false},"method":"get"},{"name":"<anonymous>","keys":[],"regexp":{"fast_star":false,"fast_slash":false},"method":"get"}],"methods":{"get":true}}}]}],"boundDispatchers":[{"path":"/","bd":{"name":"bound dispatch","keys":[],"regexp":{"fast_star":false,"fast_slash":false},"route":{"path":"/","stack":[{"name":"<anonymous>","keys":[],"regexp":{"fast_star":false,"fast_slash":false},"method":"get"}],"methods":{"get":true}}},"methods":{"get":true},"stack":[{"name":"<anonymous>","keys":[],"regexp":{"fast_star":false,"fast_slash":false},"method":"get"}]}]}